openapi: 3.0.0
info:
  title: vyardage-api
  version: '1.0'
  description: "Reference for using and developing Vyardage's data API."
  contact:
    name: Joonas Häkkinen
  license:
    name: MIT
servers:
  - url: 'http://localhost:3001'
paths:
  /api/v1/login:
    post:
      summary: Login
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Three cookies for session persistence. See description for more information.
              required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  message:
                    type: string
                required:
                  - type
                  - message
              examples:
                Empty username:
                  value:
                    type: LoginError
                    message: Empty username is not allowed.
                Empty password:
                  value:
                    type: LoginError
                    message: Empty password is not allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  message:
                    type: string
                required:
                  - type
                  - message
              examples:
                Wrong username:
                  value:
                    type: LoginError
                    message: Incorrect username.
                Wrong password:
                  value:
                    type: LoginError
                    message: Incorrect password.
      operationId: post-api-v1-login
      description: |-
        Attempt to authenticate with the `username` and `password` in request body.

        Successful login response includes three cookies:

        - `connect.sid` contains the session ID to be used in authorization headers and is `HttpOnly`.
        - `_csrf` and `XSRF-Token` for protection against cross-site request forgery (CSRF).

        If this endpoint is called with valid credentials for an existing session, nothing is done. This means that if the client is trying to get a new session or CSRF tokens, they need to either not send the respective cookies and headers or call the `/api/v1/logout` endpoint first.

        See examples for error handling in various cases.

        ### Session Persistence

        The client can persist their session by setting `remember = true` in the request payload and honoring the `Set-Cookie` headers sent in the response.

        ### CSRF Protection

        In addition to the cookies, all endpoints requiring authentication must be called with the `XSRF-Token` header set to the value of the `XSRF-Token` cookie to protect against CSRF. While this is not strictly necessary for a JSON API not accepting CORS, it is deemed a good practice to guard against future bad design decisions and the remote possibility of an attacker being able to read the results of the forged request. CSRF protection is enabled for all HTTP verbs when accessing endpoints requiring authentication.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
                remember:
                  type: boolean
                  description: 'If true, the session cookie will have 30 days maxAge, otherwise none will be set.'
                  enum:
                    - '0'
                    - '1'
              required:
                - username
                - password
                - remember
  /api/v1/logout:
    get:
      summary: Logout
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
      operationId: get-api-v1-logout
      description: Notify the application that the logged-in user is done with their session. The client should remove existing cookies as they will not be valid for authorization after completing this request. This endpoint always responds with `200 OK`.
  /api/v1/initialUser:
    post:
      summary: Create Initial User
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  isAdmin:
                    type: boolean
                  createdAt:
                    type: string
                required:
                  - id
                  - username
                  - isAdmin
                  - createdAt
              examples:
                Example:
                  value:
                    id: 9072a5af-20fc-4fad-a7ea-57dce7910ca4
                    username: admin
                    isAdmin: true
                    createdAt: '2020-03-24T13:42:21.634Z'
      operationId: post-api-v1-initialUser
      description: Create initial user to initialize the user database. Requests to this endpoint will fail if the `User` table contains rows. The created user will have admin privileges.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
  /api/v1/checkSession:
    get:
      summary: Check for valid session
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                Session is valid:
                  value:
                    message: Session is valid.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  type:
                    type: string
                  data:
                    type: string
                required:
                  - message
                  - type
              examples:
                Session is not valid:
                  value:
                    message: Authentication required.
                    type: PrivateRouteError
                    data: {}
      operationId: get-api-v1-checkSession
      description: Utility endpoint for the frontend to check if the stored session is still valid.
      requestBody: {}
  /api/v1/balls:
    get:
      summary: Get all balls
      tags:
        - Features
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ball'
              examples:
                Example:
                  value:
                    - id: 7b728ee9-9c07-4762-8075-6f73769bbaa2
                      name: Titleist Pro V1x (L87)
                      distance: 5.6
                      spin: 5.2
                    - id: 20edd06c-ae69-4a89-8277-057750f09a47
                      name: TaylorMade TP5 (L47)
                      distance: 3.5
                      spin: 4
      operationId: get-api-v1-balls
      description: Returns all balls in database. Requires authentication.
  /api/v1/clubs:
    get:
      summary: Get all clubs
      tags:
        - Features
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Club'
              examples:
                Example:
                  value:
                    - id: 46b17315-e9e3-411f-8a07-b5edd6e0d575
                      name: TaylorMade M1 9.0° (L74)
                      clubType: Driver
                    - id: 055e2872-e5d3-4bda-94af-f88a4aad55ab
                      name: Callaway Rogue Sub Zero (L86)
                      clubType: 3-wood
      operationId: get-api-v1-clubs
      description: Returns all balls in database. Requires authentication.
  /api/v1/ball:
    post:
      summary: Create Ball
      tags:
        - Features
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ball'
      operationId: post-api-v1-ball
      description: '`id` is optional and will be generated if not received.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ball'
            examples: {}
  /api/v1/club:
    post:
      summary: Create Club
      tags:
        - Features
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
      operationId: post-api-v1-club
      description: '`id` is optional and will be generated if not received.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Club'
  /api/v1/shot:
    post:
      summary: Save Shot
      tags:
        - Features
      operationId: post-api-v1-shot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                clubId:
                  type: string
                  format: uuid
                ballId:
                  type: string
                  format: uuid
                lieType:
                  type: string
                  enum:
                    - Tee
                    - Fairway
                    - Rough
                    - Sand
                  description: Type of the lie where the shot is hit from (enumerated).
                liePct:
                  type: number
                  minimum: 0
                  maximum: 1
                  description: Lie percent (some kind of a weird lie goodness value in the game) expressed as a decimal from 0 through 1.
                windDir:
                  type: integer
                  description: Wind direction relative to the target line in degrees.
                  minimum: 0
                  maximum: 359
                windSpeed:
                  type: integer
                  minimum: 0
                  description: Wind speed in mph.
                elevation:
                  type: integer
                  description: Difference in elevation between shooting and target locations. Negative value means the target is lower. Expressed in feet.
                spin:
                  type: number
                  minimum: -1
                  maximum: 1
                  description: Spin percentage on the shot. Expressed as a decimal from -1 through 1. Negative values denote backspin.
                power:
                  type: number
                  minimum: 0
                  maximum: 1
                  description: Striking power as a decimal from 0 through 1.
                actCarry:
                  type: integer
                  minimum: 0
                  description: Actual carry distance in yards.
              required:
                - clubId
                - ballId
                - lieType
                - liePct
                - windDir
                - windSpeed
                - elevation
                - spin
                - power
                - actCarry
        description: ''
      description: Enter a new shot into the database.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                Example:
                  value:
                    id: 184e8414-2930-4b5e-b918-b79a5f5a1e70
                    clubId: 46b17315-e9e3-411f-8a07-b5edd6e0d575
                    ballId: 7b728ee9-9c07-4762-8075-6f73769bbaa2
                    lieType: Tee
                    liePct: 1
                    windDir: 180
                    windSpeed: 8
                    elevation: -5
                    spin: -1
                    power: 1
                    actCarry: 300
                    userId: 9072a5af-20fc-4fad-a7ea-57dce7910ca4
                    predCarry: null
                    createdAt: '2020-04-13T08:31:48.217Z'
components:
  schemas:
    Ball:
      title: Ball
      type: object
      x-tags:
        - Features
      description: Represents different ball types in WGT.
      properties:
        id:
          type: string
          description: UUID v4
        name:
          type: string
          description: Brand name of the ball.
        distance:
          description: In-game distance metric.
          type: number
        spin:
          description: In-game spin metric.
          type: number
      required:
        - id
        - name
        - distance
        - spin
      x-examples:
        Example:
          id: 7b728ee9-9c07-4762-8075-6f73769bbaa2
          name: Titleist Pro V1x (L87)
          distance: 5.6
          spin: 5.2
    Club:
      title: Club
      type: object
      description: Represents different clubs in WGT.
      properties:
        id:
          type: string
          description: UUID v4
        name:
          type: string
          description: Brand name and level of the club.
        clubType:
          type: string
          enum:
            - Driver
            - 3-wood
            - Hybrid
            - 3-iron
            - 4-iron
            - 5-iron
            - 6-iron
            - 7-iron
            - 8-iron
            - 9-iron
            - Pitching wedge
            - Gap wedge
            - Sand wedge
            - Lob wedge
      required:
        - id
        - name
        - clubType
      x-examples:
        Example:
          id: 46b17315-e9e3-411f-8a07-b5edd6e0d575
          name: TaylorMade M1 9.0° (L74)
          clubType: Driver
